@istest
public class BafcoDtoTest {
    testmethod static void justToCoverOrderDataWrapperDto(){
        OrderDataWrapper.OrderData orderDto = new OrderDataWrapper.OrderData();
        orderDto.Account = 'test';
        orderDto.Amount = 'test';
        orderDto.Branch = 'test';
        orderDto.BusinessType = 'test';
        orderDto.Enquiry = 'test';
        orderDto.EnquiryCreated = 'test';
        orderDto.Leadc = 'test';        
        orderDto.Name = 'test';
        orderDto.QuotationTurnaroundTime = 'test';
        orderDto.QuotationValidity = 'test';
        OrderDataWrapper.OrderItemData item = new OrderDataWrapper.OrderItemData();
        item.BAF = 'test';
        item.Bayancancellationchargec = 'test';
        item.Bayan = 'test';
        item.BayanCharges = 'test';
        item.BLFees = 'test';
        item.Bunkersurcharge = 'test';
        item.Cleaningcharges = 'test';
        item.ContainerMaintenanceCharge = 'test';
        item.CarriageCongestionSurcharge = 'test';
        item.CarrierSecurityFees = 'test';
        item.OriginCustomsclearance = 'test';
        item.DestinationCustomClearance = 'test';
        item.ContainerLashingCharges = 'test';
        item.Containermovementcharges = 'test';
        item.Containerstripping = 'test';
        item.DGSurcharge = 'test';
        item.DOcharges = 'test';
        item.DestinationLoadingCharges = 'test';
        item.Direction = 'test';
        item.DTHC = 'test';
        item.EquipmentImbalanceCharge = 'test';
        item.ExportServiceFees = 'test';
        item.FasahFee = 'test';
        item.FasahCharges = 'test';
        item.FuelSurcharge = 'test';
        item.Freetimecertificatecharges = 'test';
        item.Fumigation = 'test';
        item.Gatepasscharges = 'test';
        item.InlandFuelSurcharge = 'test';
        item.InlandHandlingFees = 'test';
        item.Inlandhaulage = 'test';
        item.Inspection = 'test';
        item.Insurancecharges = 'test';
        item.ISPS = 'test';
        item.LowSulphurSurcharge = 'test';
        item.OperationalRecoverySurcharge = 'test';
        item.LashingCharges = 'test';
        item.LiftonLiftoff = 'test';
        item.LOLOCharges = 'test';
        item.LoadingCharges = 'test';
        item.MinistryclearncechargeforOOGcargo = 'test';
        item.Miscellaneous = 'test';
        item.MOTfinecharges = 'test';
        item.NonPalletizedSurcharge = 'test';
        item.OriginDetentionDemurrageCharges = 'test';
        item.OriginLoadingCharges = 'test';
        item.OTHC = 'test';
        item.OverweightOverheightsurcharge = 'test';
        item.Pestcontrol = 'test';
        item.PortShuttling = 'test';
        item.PickupCharges = 'test';
        item.Reefercntrplugincharges = 'test';
        item.ReeferPTIcharges = 'test';
        item.Reefersteamwash = 'test';
        item.Repalletization = 'test';
        item.SealCharges = 'test';
        item.SeaFreight = 'test';
        item.StuffingCharges = 'test';
        item.SweepingCleaning = 'test';
        item.Tabadul = 'test';
        item.Tarpaulinecharge = 'test';
        item.TotalINCO = 'test';
        item.Total = 'test';
        item.TotalSLc = 'test';
        item.TotalDestinationc = 'test';
        item.TruckHeadcharges = 'test';
        item.Truckidlingcharges = 'test';
        item.TransportationChargeName = 'test';
        item.TransportationCharges = 'test';
        item.VGM = 'test';
        item.Vesselcertificatecharges = 'test';
        item.WarRiskSurcharge = 'test';
        item.Wrappingpackingcharges = 'test';
        item.Xray = 'test';
        List<OrderDataWrapper.OrderItemData> orderItemList =new List<OrderDataWrapper.OrderItemData>();
        orderItemList.add(item);
        orderDto.orderItemData = orderItemList;
    }
    testmethod static void justBAFCOSalesOrderDtoDto(){
        BAFCOSalesOrderDto dto = new BAFCOSalesOrderDto();
        dto.routeId = 'test';        
        dto.routeName = 'test';        
        dto.routingRegular = 'test';        
        dto.shipmentKind = 'test';        
        dto.serviceType = 'test';        
        dto.incoTerm = 'test';        
        dto.portLoading = 'test';        
        dto.portLoadingId = 'test';        
        dto.placeOfPickup = 'test';        
        dto.placeOfDischarge = 'test';        
        dto.dgClass = 'test';        
        dto.portDestination = 'test';        
        dto.shippingLine = 'test';        
        dto.commodity = 'test';        
        dto.cargoWeights = 12;        
        dto.dangerousGoods = false;        
        dto.remarks = 'test';        
        dto.enquiryId = 'test';    
    }
    testmethod static void justBAFCOLinitemDtoDto(){
        BAFCOLinitemDto dto = new BAFCOLinitemDto();        
        dto.equipmentId = '10';        
        dto.quoteItemId = '10';        
        dto.equipmentName = '10';        
        dto.sellingSeaFreight = 10;        
        dto.buyingSeaFreight = 10;        
        dto.sellingDestinationCustomClearance = 10;        
        dto.buyingDestinationCustomClearance = 10;        
        dto.sellingBayan = 10;        
        dto.buyingBayan = 10;        
        dto.sellingDestinationLoadingCharges = 10;        
        dto.buyingDestinationLoadingCharges = 10;        
        dto.sellingFasahFees = 10;        
        dto.buyingFasahFees = 10;        
        dto.sellingInspection = 10;        
        dto.buyingInspection = 10;        
        dto.sellingliftOnLiftOff = 10;        
        dto.buyingliftOnLiftOff = 10;        
        dto.sellingOriginCustomClerance = 10;        
        dto.buyingOriginCustomClerance = 10;        
        dto.sellingOriginLoadingCharges = 10;        
        dto.buyingOriginLoadingCharges = 10;        
        dto.sellingPortShuttling = 10;        
        dto.buyingPortShuttling = 10;        
        dto.sellingTabadul = 10;        
        dto.buyingTabadul = 10;        
        dto.sellingXRay = 10;        
        dto.buyingXray = 10;        
        dto.sellingLoadingCharges = 10;        
        dto.buyingLoadingCharges = 10;        
        dto.sellingTotal = 10;        
        dto.buyingTotal = 10;        
        dto.validity = '10';        
        dto.rmsId = '10';
        BAFCOLinitemDto.additionalChargeList addObj = new BAFCOLinitemDto.additionalChargeList();
        addObj.Name = 'tes';
        addObj.value =10;
        List<BAFCOLinitemDto.additionalChargeList> addLis = new List<BAFCOLinitemDto.additionalChargeList>();
        addLis.add(addObj);
        dto.additionalChargeList = addLis;
    }
    testmethod static void BAFCOGenerteQuoteDto(){
        BAFCOGenerteQuoteDto dto = new BAFCOGenerteQuoteDto();
        dto.seaFreightSellRate =10;
        dto.total =10;
        dto.offSet =10;
        dto.quotationItemId ='10';
        dto.currencyCode ='10';
        BAFCOGenerteQuoteDto.AdditionalCharge addObj = new BAFCOGenerteQuoteDto.AdditionalCharge();
        addObj.Name = 'tes';
        addObj.value =10;
        List<BAFCOGenerteQuoteDto.AdditionalCharge> addLis = new List<BAFCOGenerteQuoteDto.AdditionalCharge>();
        addLis.add(addObj);
        dto.additionalChargeList = addLis;
        
        BAFCOGenerteQuoteDto.servichargesObj seObj1 = new BAFCOGenerteQuoteDto.servichargesObj();
        seObj1.BAF = 10;
        seObj1.bunkerCharges = 10;
        seObj1.cleaningCharges = 10;
        seObj1.CMC = 10;
        seObj1.carriageCongestionSurcharge = 10;
        seObj1.carrierSecurityFees = 10;
        seObj1.dgSurcharge = 10;
        seObj1.DTHC = 10;
        seObj1.equipmentImbalance = 10;
        seObj1.inlandFuelCharges = 10;
        seObj1.inlandHandlingfees = 10;
        seObj1.inlandHaulage = 10;
        seObj1.ISPS = 10;
        seObj1.lowerSulphurSurcharge = 10;
        seObj1.operationalRecovery = 10;
        seObj1.OTHC = 10;
        seObj1.overWeightCharge = 10;
        seObj1.sealCharges = 10;
        seObj1.warRiskSurcharges = 10;
        seObj1.totalSl = 10;
        seObj1.shippTotalChanged = false;
        
        BAFCOGenerteQuoteDto.serviceChargeList servObj = new BAFCOGenerteQuoteDto.serviceChargeList();
        servObj.offSet =10;
        servObj.currencyCode ='10';
    }
    testmethod static void originCharge(){
        BAFCOGenerteQuoteDto.originChargesObj originObj = new BAFCOGenerteQuoteDto.originChargesObj();
        originObj.bayan = 10;
        originObj.blFees = 10;
        originObj.originCustomClearance = 10;
        originObj.exportServiceFees = 10;
        originObj.fasahFees = 10;
        originObj.inspection = 10;
        originObj.insuranceCharges = 10;
        originObj.liftOnLiftOff = 10;
        originObj.OriginDetention = 10;
        originObj.OriginLoadingCharges = 10;
        originObj.pickUpCharges = 10;
        originObj.ReeferControlPlugInCharge = 10;
        originObj.tabadul = 10;
        originObj.trapulinCharges = 10;
        originObj.truckIdlingCharges = 10;
        originObj.transportationCharges = 10;
        originObj.vgm = 10;
        originObj.xray = 10;
        originObj.lashingCharges = 10;
        originObj.fuelSurcharge = 10;        
        originObj.TotalOrigincharges = 10;
        originObj.directionValue = '10';
        originObj.loadingChargeId = '10';
        originObj.originTotalChanged = false;
        originObj.loadingChargeName = '10';
    }
    testmethod static void destinCharge(){
        BAFCOGenerteQuoteDto.destinChargeObj destinObj = new BAFCOGenerteQuoteDto.destinChargeObj();
        destinObj.destinBayanCharges = 10;        
        destinObj.destinCustomClearanceCharges = 10;        
        destinObj.destinDOCharges = 10;        
        destinObj.destinDTHCCharges = 10;        
        destinObj.destinFasahCharges = 10;        
        destinObj.destinGatePassCharges = 10;        
        destinObj.destinLOLOCharges = 10;        
        destinObj.destinTransPortationCharges = 10;        
        destinObj.destinTotalCharges = 10;        
        destinObj.DestinTotalChanged = false;
    }
}